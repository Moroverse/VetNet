{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "swiftformat . --quiet 2>/dev/null || true",
            "timeout": 60
          },
          {
            "type": "command",
            "command": "swiftlint --quiet 2>/dev/null || true",
            "timeout": 60
          },
          {
            "type": "command",
            "command": "tuist test --platform ios --skip-ui-tests --no-open 2>/dev/null || echo 'Unit tests need attention'",
            "timeout": 180
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_INPUT\" == *.swift ]]; then tuist generate --no-open 2>/dev/null || true; fi",
            "timeout": 120
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "if git diff --name-only | grep -q '\\.swift$'; then tuist build --platform ios --no-open 2>/dev/null || echo 'Build needs attention'; fi",
            "timeout": 300
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "grep -E '(password\\s*=|API_KEY\\s*=|secret\\s*=|token\\s*=)' <<< \"$TOOL_INPUT\" && { echo 'Error: Hardcoded credentials detected! Please use environment variables or secure storage instead.' >&2; exit 2; } || true",
            "timeout": 5
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_INPUT\" =~ (.env|Secrets.plist|Info.plist) ]]; then echo 'Warning: Modifying sensitive file. Please review carefully.' >&2; fi",
            "timeout": 5
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_INPUT\" =~ (git\\s+commit) ]]; then tuist test --platform ios --no-open || { echo 'Error: All tests must pass before committing!' >&2; exit 2; }; fi",
            "timeout": 300
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "tuist test --platform ios --no-open 2>/dev/null && echo '✅ All tests passing!' || echo '⚠️ Some tests need attention'",
            "timeout": 300
          },
          {
            "type": "command",
            "command": "echo '📊 Test Coverage Report:' && swift test --enable-code-coverage 2>/dev/null | grep -A5 'Test Suite' || true",
            "timeout": 120
          },
          {
            "type": "command",
            "command": "echo '📝 Session Summary: Run \"git status\" to review changes. Use \"git diff\" to see modifications.'",
            "timeout": 5
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "matcher": "startup",
        "hooks": [
          {
            "type": "command",
            "command": "echo '🏥 VetNet session started. Loading project environment...' && tuist generate --no-open && echo '✅ Project ready for TDD development!'",
            "timeout": 120
          }
        ]
      },
      {
        "matcher": "resume",
        "hooks": [
          {
            "type": "command",
            "command": "echo '🔄 Resuming VetNet session...' && git status --short && echo '---' && git log --oneline -5",
            "timeout": 10
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$USER_PROMPT\" =~ (delete|remove|drop|destroy) ]]; then echo '⚠️ Destructive operation detected. Please review carefully.' >&2; fi",
            "timeout": 5
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Subagent task completed. Running validation...' && swiftlint --quiet 2>/dev/null || true",
            "timeout": 60
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Auto-compacting: Saving important context...' && git diff > /tmp/vetnet-uncommitted-changes.diff 2>/dev/null || true",
            "timeout": 10
          }
        ]
      },
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Manual compact: Backing up session state...' && git status > /tmp/vetnet-session-state.txt 2>/dev/null || true",
            "timeout": 10
          }
        ]
      }
    ]
  }
}